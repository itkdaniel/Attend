package michael.attend;

import android.util.Log;

import java.util.ArrayList;

public class User {

    public String name, username, email, password;
    public ArrayList<String> groupList;
    public ArrayList<String> hostGroupList;

//    User DataBase "Table":
//    Name, Email, userGroups, hostGroups
//
//    get user.hostGroups
//
//    if groupName is in user.hostGroupList {
//        startActivity(hostViewgroup)
//    }else{
//        startActivity(userVewGroup)
//    }
    private int id;

    public User(String email){
        this.email = email;
        this.groupList = new ArrayList<String>();
    }
    public User(String name, String username, String email, String password, ArrayList<String> groupList){
        this.name = name;
        this.email = email;
        this.password = password;
        this.username = username;
        this.groupList = groupList;
    }

    private void setId(int id){
        this.id = id;
    }

    private int getId(){
        return this.id;
    }
    private void setName(String name){
        this.name = name;
    }

    private String getName(){
        return this.name;
    }

    private void setUsername(String username){
        this.username = username;
    }

    private String getUsername(){
        return this.username;
    }

    private void setEmail(String email){
        this.email = email;
    }

    private String getEmail(){
        return this.email;
    }

    public ArrayList<String> getGroupList(){
        return this.groupList;
    }
    public void setGroupList(ArrayList<String> groupList){
        this.groupList = groupList;
    }
    public void addGroup(String group){
        this.groupList.add(group);
        Log.d("GroupList: ", groupList.toString());
    }

    private void setPassword(String password){
        this.password = password;
    }

    private String getPassword(){
        return this.password;
    }
}


/*
    not sure if this works, but the theory of this seems correct

    First, create a table named listGroups

    This table will include different groups each with a unique ID that is generated by firebase

    We can include different types of data types to fit our desired list elements

    //create user object
    User u;

    //hit up listGroups (when its made)
    Firebase postRef = ref.child("listGroups");

    //this will generate a reference towards our keys for each user added
    Firebase newPostRef = postRef.push();



    //create map/list/whatever
    Map<String, String> group1 = new HashMap<String, String>();

    //insert whatever user details you want into map, do this for any user added to group
    group1.put("name", u.getName());
    group1.put("username", u.getUsername());

    //set value for groupID (i think? some shit like that)
    newPostRef.setValue(user1);


    //push user with info into our table
    postRef.push().setValue(user1);

    // Get the unique ID generated by push() so we can use this for further adds into group
    // ie) We have all groups listed with a certain key that we can use to identify it.
           So when a user tries to join group, we can create a addGroup(string groupID) function to
           add to group with that key. We search our listGroups for a bucket with our input key to
           see if it exists. If it does, then we will add user to that group. If it does not exist,
           say the code is invalid.

           but yeah here's that code lmao

    String groupID = newPostRef.getKey();




 */